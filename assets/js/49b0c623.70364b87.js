"use strict";(self.webpackChunkkevingrondin=self.webpackChunkkevingrondin||[]).push([[9276],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return w}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,w=p["".concat(c,".").concat(f)]||p[f]||m[f]||i;return n?r.createElement(w,s(s({ref:t},u),{},{components:n})):r.createElement(w,s({ref:t},u))}));function w(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8303:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1},s="\ud83d\udea2 Navigation",o={unversionedId:"React Native/wireframe/navigation",id:"React Native/wireframe/navigation",title:"\ud83d\udea2 Navigation",description:"Premi\xe8re \xe9tape pour la creation du Wireframe consiste \xe0 repr\xe9senter les diff\xe9rente vue, navigation, bloc repr\xe9sentant image, logo, input, bouton",source:"@site/docs/React Native/wireframe/navigation.md",sourceDirName:"React Native/wireframe",slug:"/React Native/wireframe/navigation",permalink:"/wiki/docs/React Native/wireframe/navigation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/React Native/wireframe/navigation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd29 Astuce",permalink:"/wiki/docs/React Native/create-project/astuce"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Navigation vers les principaux ecrans",id:"navigation-vers-les-principaux-ecrans",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-navigation"},"\ud83d\udea2 Navigation"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Premi\xe8re \xe9tape pour la creation du Wireframe consiste \xe0 repr\xe9senter les diff\xe9rente vue, navigation, bloc repr\xe9sentant image, logo, input, bouton")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Initialisation du projet"',title:'"Initialisation',du:!0,'projet"':!0},"npx create-expo-app wireframe --template\n")),(0,a.kt)("p",null,"Tr\xe9s peu de d\xe9pendances sont n\xe9cessaire pour la cr\xe9ation du wireframe"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tailwind qui va nous permettre de faire nos bloc sans CSS")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Installation Tailwind"',title:'"Installation','Tailwind"':!0},"yarn add nativewind\nyarn add --dev tailwindcss\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Setup Tailwind"',title:'"Setup','Tailwind"':!0},"npx tailwindcss init\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="tailwind.config.js"',title:'"tailwind.config.js"'},'module.exports = {\n// highlight-start\n// content: [],\n    content: ["./App.{js,jsx,ts,tsx}", "./src/**/*.{js,jsx,ts,tsx}"],\n// highlight-end\n    theme: {\n        extend: {},\n    },\n    plugins: [],\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="babel.config.js"',title:'"babel.config.js"'},'module.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ["babel-preset-expo"],\n    // highlight-start\n    plugins: ["nativewind/babel"],\n    // highlight-end\n  };\n};\n')),(0,a.kt)("h2",{id:"navigation-vers-les-principaux-ecrans"},"Navigation vers les principaux ecrans"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md",metastring:'title="Structure du projet"',title:'"Structure',du:!0,'projet"':!0},"  ... // autre fichier et dossier\n  App.tsx // point d'entr\xe9e au projet\n  src\n      ... // autre dossier\n      navigation\n          navigation.tsx // d\xe9finition des routes\n      screen\n          connexionScreen.tsx \n          menuScreen.tsx      \n          splashScreen.tsx\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"// On rajoute l'import de NavigationContainer et on Encapsule notre balise navigation\nimport { NavigationContainer } from '@react-navigation/native';\nimport Navigation from './src/navigation';\n\nconst App = () => {\n\n  return (\n    <NavigationContainer>\n      <Navigation />\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/navigation/navigation.tsx"',title:'"src/navigation/navigation.tsx"'},"import * as React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport SplashScreen from '../screen/splashScreen';\nimport ConnexionScreen from '../screen/connexionScreen';\nimport MenuScreen from '../screen/menuScreen';\n\nexport type StackParams = {\n    SplashScreen: undefined;\n    Connexion: undefined;\n    Menu: undefined;\n}\n\nconst Stack = createNativeStackNavigator<StackParams>();\n\nconst Navigation: React.FC = () => {\n    return (\n        <Stack.Navigator initialRouteName='SplashScreen' screenOptions={{ headerShown: false }}>\n            <Stack.Screen name=\"SplashScreen\" component={SplashScreen} />\n            <Stack.Screen name=\"Connexion\" component={ConnexionScreen} />\n            <Stack.Screen name=\"Menu\" component={MenuScreen} />\n        </Stack.Navigator>\n    );\n};\n\nexport default Navigation\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/screen/splashScreen.tsx"',title:'"src/screen/splashScreen.tsx"'},"import React from 'react';\nimport { BackHandler, Text, SafeAreaView } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { useIsFocused } from \"@react-navigation/native\";\nimport tw from 'twrnc'\n\nimport { StackParams } from '../navigation/navigation';\n\ntype Props = NativeStackScreenProps<StackParams, 'SplashScreen'>;\n\nconst SplashScreen: React.FC<Props> = ({navigation}) => {\n    const isFocused = useIsFocused();\n\n    React.useEffect(() => {\n        BackHandler.addEventListener(\"hardwareBackPress\", () => true);\n        return () => BackHandler.removeEventListener(\"hardwareBackPress\", () => true)\n    }, []);\n\n    React.useEffect(() => {\n        if (isFocused) {\n            setTimeout(() => {\n                navigation.navigate('Connexion')\n            }, 2000);\n        }\n    }, [isFocused])\n\n    return (\n        <SafeAreaView style={tw`flex h-full justify-center items-center`}>\n            <Text style={tw`text-4xl text-black`}>SplashScreen</Text>\n        </SafeAreaView>\n    )\n}\n\nexport default SplashScreen\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/screen/connexionScreen.tsx"',title:'"src/screen/connexionScreen.tsx"'},"import React from 'react';\nimport { SafeAreaView, Text, ToastAndroid, TouchableOpacity, Vibration, View } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport tw from 'twrnc'\n\nimport { StackParams } from '../navigation/navigation';\n\ntype Props = NativeStackScreenProps<StackParams, 'Connexion'>;\n\nconst ConnexionScreen: React.FC<Props> = ({navigation}) => {\n\n    const showToast = () =>\n        ToastAndroid.show(\"Connexion r\xe9ussi\", ToastAndroid.SHORT);\n\n    const vibrate = () => Vibration.vibrate(70);\n\n    return (\n        <SafeAreaView style={tw`flex h-full items-center`}>\n            <View style={tw`mt-10 justify-center items-center w-60 h-18 bg-gray-400`}>\n                <Text style={tw`text-white`}>Titre</Text>\n            </View>\n            <View style={tw`mt-10 justify-center items-center w-80 h-12 bg-gray-400`}>\n                <Text style={tw`text-white`}>Connexion</Text>\n            </View>\n            <TouchableOpacity onPress={() => {\n                vibrate();\n                showToast();\n                navigation.navigate('Menu');\n            }}>\n                <View style={tw`mt-10 justify-center items-center w-80 h-18 bg-gray-400`}>\n                    <Text style={tw`text-white`}>Input</Text>\n                </View>\n            </TouchableOpacity>\n        </SafeAreaView>\n    )\n}\n\nexport default ConnexionScreen\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/screen/menuScreen.tsx"',title:'"src/screen/menuScreen.tsx"'},"import React from 'react';\nimport { BackHandler, SafeAreaView, Text, TouchableOpacity, View } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport tw from 'twrnc'\n\nimport { StackParams } from '../navigation/navigation';\n\ntype Props = NativeStackScreenProps<StackParams, 'Menu'>;\n\nconst MenuScreen: React.FC<Props> = ({navigation}) => {\n\n    React.useEffect(() => {\n        BackHandler.addEventListener(\"hardwareBackPress\", () => true);\n        return () => BackHandler.removeEventListener(\"hardwareBackPress\", () => true)\n    }, []);\n\n    return (\n        <SafeAreaView style={tw`flex h-full items-center`}>\n            <View style={tw`mt-10 flex flex-row w-full`}>\n                <View style={tw`w-9/12 flex justify-center items-center`}>\n                    <View style={tw`flex justify-center items-center h-20 pl-20 bg-gray-400`}>\n                        <Text style={tw`text-white`}>Titre</Text>\n                    </View>\n                </View>\n                <View style={tw`w-3/12 flex justify-center items-center pr-5`}>\n                    <TouchableOpacity onPress={() => navigation.navigate('SplashScreen')}>\n                        <View style={tw`text-white h-14 w-14 bg-gray-400 rounded-full flex justify-center items-center`}>\n                            <Text style={tw`text-white`}>Quit</Text>\n                        </View>\n                    </TouchableOpacity>\n                </View>\n            </View>\n            <View style={tw`mt-10 flex flex-row justify-around items-center w-full`}>    \n                <View style={tw`flex justify-center items-center w-1/2`}>\n                    <View style={tw`flex justify-center items-center w-38 h-20 bg-gray-400`}>\n                        <Text style={tw`text-white`}>Menu</Text>\n                    </View>\n                </View>\n                <View style={tw`flex justify-center items-center w-1/2`}>\n                    <View style={tw`flex justify-center items-center w-38 h-20 bg-gray-400`}>\n                        <Text style={tw`text-white`}>Menu</Text>\n                    </View>\n                </View>\n            </View>\n            <View style={tw`mt-5 flex flex-row justify-around items-center w-full`}>    \n                <View style={tw`flex justify-center items-center w-1/2`}>\n                    <View style={tw`flex justify-center items-center w-38 h-20 bg-gray-400`}>\n                        <Text style={tw`text-white`}>Menu</Text>\n                    </View>\n                </View>\n                <View style={tw`flex justify-center items-center w-1/2`}>\n                    <View style={tw`flex justify-center items-center w-38 h-20 bg-gray-400`}>\n                        <Text style={tw`text-white`}>Menu</Text>\n                    </View>\n                </View>\n            </View>\n            <View style={tw`mt-5 flex flex-row justify-around items-center w-full`}>    \n                <View style={tw`flex justify-center items-center w-1/2`}>\n                    <View style={tw`flex justify-center items-center w-38 h-20 bg-gray-400`}>\n                        <Text style={tw`text-white`}>Menu</Text>\n                    </View>\n                </View>\n                <View style={tw`flex justify-center items-center w-1/2`}>\n                    <View style={tw`flex justify-center items-center w-38 h-20 bg-gray-400`}>\n                        <Text style={tw`text-white`}>Menu</Text>\n                    </View>\n                </View>\n            </View>\n        </SafeAreaView>\n    )\n}\n\nexport default MenuScreen\n")))}m.isMDXComponent=!0}}]);